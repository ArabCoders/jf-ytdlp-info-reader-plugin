name: build

on:
  push:
    branches:
      - "*"
    paths-ignore:
      - "**.md"
      - ".github/**"
  pull_request:
    branches:
      - "master"
    paths:
      - "**.cs"
      - "**.csproj"

env:
  DOTNET_VERSION: "6.0.x"

jobs:
  test_build:
    name: test-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: restore cached dependencies
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --verbosity normal
        continue-on-error: false

  build:
    needs: test_build
    if: github.event_name != 'pull_request'
    name: build_package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: restore cached dependencies
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish --configuration Release --no-restore --output bin

      - name: Package
        id: create_package
        shell: bash
        run: |
          tag=$(git describe --tags --always)
          release_name="YTINFOReader-${tag}"

          # Pack files
          7z a -tzip "${release_name}.zip" "./bin/*.dll"
          echo "::set-output name=release_name::${release_name}"
          echo "::set-output name=release_tag::${tag}"
          echo "::set-output name=filename::${release_name}.zip"

      - name: Release
        if: startsWith(github.ref, 'refs/tags')
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GH_TOKEN }}"
          name: "${{ steps.create_package.outputs.release_tag }}"
          automatic_release_tag: "${{ steps.create_package.outputs.release_tag }}"
          prerelease:
            true
          files: |
            *.zip
